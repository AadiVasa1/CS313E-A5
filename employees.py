"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, Aadi Vasa and Raghuvendra Chowdhry, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: adv982
UT EID 2: rbc993
"""

from abc import ABC, abstractmethod
import random

DAILY_EXPENSE = 60
HAPPINESS_THRESHOLD = 50
MANAGER_BONUS = 1000
TEMP_EMPLOYEE_PERFORMANCE_THRESHOLD = 50
PERM_EMPLOYEE_PERFORMANCE_THRESHOLD = 25
RELATIONSHIP_THRESHOLD = 10
INITIAL_PERFORMANCE = 75
INITIAL_HAPPINESS = 50
PERCENTAGE_MAX = 100
PERCENTAGE_MIN = 0
SALARY_ERROR_MESSAGE = "Salary must be non-negative."


class Employee(ABC):
    """
    Abstract base class representing a generic employee in the system.
    """

    def __init__(self, name, manager, salary, savings):
        self.relationships = {}
        self.savings = savings
        self.is_employed = True
        self.__name = name
        self.__manager = manager
        self.performance = INITIAL_PERFORMANCE
        self.happiness = INITIAL_HAPPINESS
        self.salary = salary

    def interact(self, other):
        """interaction method"""
        if other.name not in self.relationships:
            self.relationships[other.name]=0
        if self.relationships[other.name]>RELATIONSHIP_THRESHOLD:
            self.happiness+=1
        elif self.happiness>=HAPPINESS_THRESHOLD and other.happiness>=HAPPINESS_THRESHOLD:
            self.relationships[other.name]+=1
        else:
            self.happiness-=1
            self.relationships[other.name]-=1

    def daily_expense(self):
        """daily expense method"""
        self.happiness-=1
        self.savings-=DAILY_EXPENSE

    def __str__(self):
        ans=f"{self.name}\n\tSalary: ${self.salary}"
        ans+=f"\n\tSavings: ${self.savings}"
        ans+=f"\n\tHappiness: {self.happiness}%\n\tPerformance: {self.performance}%"
        return ans

    @abstractmethod
    def work(self):
        """work method"""
    @property
    def name(self):
        """ read only method"""
        return self.__name
    @property
    def manager(self):
        """ read only method"""       
        return self.__manager
    @property
    def performance(self):
        """read only method"""
        return self.__performance
    @performance.setter
    def performance(self, val):
        if val<0:
            self.__performance=0
        elif val>100:
            self.__performance=100
        else:
            self.__performance=val
    @property
    def happiness(self):
        """read only method"""
        return self.__happiness
    @happiness.setter
    def happiness(self, val):
        if val<0:
            self.__happiness=0
        elif val>100:
            self.__happiness=100
        else:
            self.__happiness=val
    @property
    def salary(self):
        """read only method"""
        return self.__salary
    @salary.setter
    def salary(self, val):
        if val >= 0:
            self.__salary = val
        else:
            raise ValueError

class Manager(Employee):
    """
    A subclass of Employee representing a manager.
    """
    def work(self):
        change = random.randint(-5,5)
        self.performance+=change
        if change<=0:
            self.happiness-=1
            for v in self.relationships:
                self.relationships[v]-=1
        else:
            self.happiness+=1

class TemporaryEmployee(Employee):
    """
    A subclass of Employee representing a temporary employee.
    """
    def work(self):
        change = random.randint(-15,15)
        self.performance += change
        if change <= 0:
            self.happiness -= 2
        else:
            self.happiness += 1

    def interact(self, other):
        "interact in child class"
        super().interact(other)
        if self.manager is not None and other.name==self.manager.name:
            bool1 = other.happiness>=HAPPINESS_THRESHOLD
            bool2 = self.performance>=TEMP_EMPLOYEE_PERFORMANCE_THRESHOLD
            if bool1 and bool2:
                self.savings+=MANAGER_BONUS
            elif other.happiness<=HAPPINESS_THRESHOLD:
                self.salary//=2
                self.happiness-=5
            if self.salary<=0:
                self.is_employed=False

class PermanentEmployee(Employee):
    """
    A subclass of Employee representing a permanent employee.
    """
    def work(self):
        change = random.randint(-10, 10)
        self.performance += change
        if change >= 0:
            self.happiness += 1

    def interact(self, other):
        super().interact(other)
        if self.manager is not None and other.name == self.manager.name:
            bool1 = other.happiness > HAPPINESS_THRESHOLD
            bool2 = self.performance > PERM_EMPLOYEE_PERFORMANCE_THRESHOLD
            if bool1 and bool2:
                self.savings += MANAGER_BONUS
            elif other.happiness <= HAPPINESS_THRESHOLD:
                self.happiness -= 1
